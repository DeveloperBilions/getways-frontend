diff --git a/package-lock.json b/package-lock.json
index 317a328..f4b2e5b 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -8,7 +8,6 @@
       "name": "game-admin-portal",
       "version": "0.1.0",
       "dependencies": {
-        "@stripe/stripe-js": "^5.4.0",
         "@tanstack/react-query": "^5.51.1",
         "@testing-library/jest-dom": "^5.17.0",
         "@testing-library/react": "^13.4.0",
@@ -33,7 +32,6 @@
         "react-router-dom": "^6.24.1",
         "react-scripts": "5.0.1",
         "reactstrap": "^9.2.3",
-        "stripe": "^17.5.0",
         "web-vitals": "^2.1.4",
         "xlsx": "^0.18.5"
       }
@@ -3995,15 +3993,6 @@
         "@sinonjs/commons": "^1.7.0"
       }
     },
-    "node_modules/@stripe/stripe-js": {
-      "version": "5.4.0",
-      "resolved": "https://registry.npmjs.org/@stripe/stripe-js/-/stripe-js-5.4.0.tgz",
-      "integrity": "sha512-3tfMbSvLGB+OsJ2MsjWjWo+7sp29dwx+3+9kG/TEnZQJt+EwbF/Nomm43cSK+6oXZA9uhspgyrB+BbrPRumx4g==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=12.16"
-      }
-    },
     "node_modules/@surma/rollup-plugin-off-main-thread": {
       "version": "2.2.3",
       "resolved": "https://registry.npmjs.org/@surma/rollup-plugin-off-main-thread/-/rollup-plugin-off-main-thread-2.2.3.tgz",
@@ -17906,19 +17895,6 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/stripe": {
-      "version": "17.5.0",
-      "resolved": "https://registry.npmjs.org/stripe/-/stripe-17.5.0.tgz",
-      "integrity": "sha512-kcyeAkDFjGsVl17FqnG7q/+xIjt0ZjOo9Dm+q8deAvs2Xe4iAHrhxyoP4etUVFc+/LZJANjIPVR+ZOnt9hr/Ug==",
-      "license": "MIT",
-      "dependencies": {
-        "@types/node": ">=8.1.0",
-        "qs": "^6.11.0"
-      },
-      "engines": {
-        "node": ">=12.*"
-      }
-    },
     "node_modules/style-loader": {
       "version": "3.3.4",
       "resolved": "https://registry.npmjs.org/style-loader/-/style-loader-3.3.4.tgz",
diff --git a/package.json b/package.json
index 5bc2a1e..4437c05 100644
--- a/package.json
+++ b/package.json
@@ -3,7 +3,6 @@
   "version": "0.1.0",
   "private": true,
   "dependencies": {
-    "@stripe/stripe-js": "^5.4.0",
     "@tanstack/react-query": "^5.51.1",
     "@testing-library/jest-dom": "^5.17.0",
     "@testing-library/react": "^13.4.0",
@@ -28,7 +27,6 @@
     "react-router-dom": "^6.24.1",
     "react-scripts": "5.0.1",
     "reactstrap": "^9.2.3",
-    "stripe": "^17.5.0",
     "web-vitals": "^2.1.4",
     "xlsx": "^0.18.5"
   },
diff --git a/src/App.js b/src/App.js
index c6d5c9d..4dde866 100644
--- a/src/App.js
+++ b/src/App.js
@@ -32,12 +32,8 @@ import { MyTheme } from "./Layout/MyDefaultTheme";
 import { UserList } from "./Views/User/UserList";
 import { RechargeRecordsList } from "./Views/RechargeRecords/RechargeRecordsList";
 import { RedeemRecordsList } from "./Views/RedeemRecords/RedeemRecordsList";
-import { SummaryList } from "./Views/Summary/SummaryList ";
-import { Summary } from "./Views/Summary/Summary";
 import { DataSummary } from "./Views/Summary/DataSummary";
 import { PlayerList } from "./Views/Player/PlayerList";
-import { Stripe } from "./Views/Stripe/Stripe";
-import { Success } from "./Views/Stripe/Success";
 
 function App() {
   return (
@@ -72,19 +68,18 @@ function App() {
               options={{ label: "Redeem Records" }}
               icon={LocalAtmIcon}
             />
-            <Resource
+            {/*<Resource
               name="summaryData"
               list={Summary}
               options={{ label: "Summary" }}
               icon={SummarizeIcon}
-            />
-            {/* <Resource
-              name="StripeForm"
-              list={Stripe}
-              options={{ label: "StripeForm" }}
-              icon={SummarizeIcon}
             /> */}
-            <Route path="/success" element={<Success />} />
+            <Resource
+              name="summary"
+              list={DataSummary}
+              options={{ label: "Summary" }}
+              icon={SummarizeIcon}
+            />
           </>
         ) : (
           <>
@@ -123,15 +118,7 @@ function App() {
           </>
         )
       }
-      <CustomRoutes>
-        {" "}
-        <Route
-          path="/success"
-          element={
-              <Success />
-          }
-        />
-      </CustomRoutes>
+
       <CustomRoutes noLayout>
         <Route path="/loginEmail" element={<LoginEmailPage />} />
         <Route path="/updateUser" element={<UpdateUser />} />
diff --git a/src/Assets/css/Success.css b/src/Assets/css/Success.css
deleted file mode 100644
index 3c84759..0000000
--- a/src/Assets/css/Success.css
+++ /dev/null
@@ -1,46 +0,0 @@
-.success-container {
-    display: flex;
-    justify-content: center;
-    align-items: center;
-    min-height: 100vh;
-    text-align: center;
-    font-family: Arial, sans-serif;
-  }
-  
-  .loader-container {
-    display: flex;
-    flex-direction: column;
-    align-items: center;
-  }
-  
-  .spinner {
-    width: 50px;
-    height: 50px;
-    border: 5px solid rgba(0, 0, 0, 0.1);
-    border-top: 5px solid #007bff; /* Primary color for the spinner */
-    border-radius: 50%;
-    animation: spin 1s linear infinite;
-  }
-  
-  @keyframes spin {
-    from {
-      transform: rotate(0deg);
-    }
-    to {
-      transform: rotate(360deg);
-    }
-  }
-  
-  .status-message {
-    font-size: 1.5rem;
-    font-weight: bold;
-  }
-  
-  .status-message.success {
-    color: green;
-  }
-  
-  .status-message.error {
-    color: red;
-  }
-  
\ No newline at end of file
diff --git a/src/Provider/parseAuthProvider.js b/src/Provider/parseAuthProvider.js
index 69076b1..88a3ce5 100644
--- a/src/Provider/parseAuthProvider.js
+++ b/src/Provider/parseAuthProvider.js
@@ -9,7 +9,7 @@ Parse.serverURL = process.env.REACT_APP_URL;
 Parse.masterKey = process.env.REACT_APP_MASTER_KEY;
 export const authProvider = {
   async login(params) {
-    Parse.masterKey = process.env.REACT_APP_MASTER_KEY;
+    Parse.masterKey = process.env.REACT_APP_MASTER_KEY; 
 
     const { email, password } = params;
     try {
diff --git a/src/Provider/parseDataProvider.js b/src/Provider/parseDataProvider.js
index 5259cac..1c1bde0 100644
--- a/src/Provider/parseDataProvider.js
+++ b/src/Provider/parseDataProvider.js
@@ -1,7 +1,5 @@
 import { Parse } from "parse";
-import Stripe from 'stripe';
-
-const stripe = new Stripe(process.env.REACT_APP_STRIPE_KEY_PRIVATE); // Replace with your Stripe secret key
+import { calculateDataSummaries } from '../utils';
 
 Parse.initialize(
   process.env.REACT_APP_APPID,
@@ -88,83 +86,130 @@ export const dataProvider = {
     }
   },
   getList: async (resource, params) => {
+    //works
+    // console.log("GETLIST");
+    // console.log("*****", params);
+    const { page, perPage } = params.pagination;
+    const { field, order } = params.sort;
+    var filter = params.filter;
+    var q = filter.q;
+    delete filter.q;
+    // console.log("==== =", filter);
+    var query = new Parse.Query(Parse.Object);
+    var count = null;
+
+    Parse.masterKey = Parse.masterKey || process.env.REACT_APP_MASTER_KEY;
+    const role = localStorage.getItem("role");
+    const userid = localStorage.getItem("id");
+    const username = localStorage.getItem("username");
+
+    const fetchUsers = async (selectedUser) => {
+      const user = selectedUser ? selectedUser : await Parse.User.current();
+
+      const usrQuery = new Parse.Query(Parse.User);
+      usrQuery.equalTo("userParentId", user.id);
+      usrQuery.limit(10000);
+      usrQuery.select(
+        "objectId",
+        "userParentId",
+        "userParentName",
+        "roleName",
+        "userType",
+        "name",
+        "username",
+        "userReferralCode",
+        "email"
+      );
+      var results = await usrQuery.find({ useMasterKey: true });
+      results.push(user);
+      // console.log(results);
+      var ids = results.map((r) => r.id);
+      ids.push(user.id);
+      const data = results.map((o) => ({ id: o.id, ...o.attributes }));
+
+      return { ids: ids, data: data };
+    };
     try {
-      const { page, perPage } = params.pagination;
-      const { field, order } = params.sort;
-      const { q, ...filter } = params.filter;
-      const role = localStorage.getItem("role");
-      const userid = localStorage.getItem("id");
-      const username = localStorage.getItem("username");
-  
-      Parse.masterKey = Parse.masterKey || process.env.REACT_APP_MASTER_KEY;
-  
-      const createFilterQuery = (query, filter) => {
-        Object.entries(filter).forEach(([key, value]) => {
-          if (key === "username") query.matches(key, value, "i");
-          else query.equalTo(key, value);
-        });
-      };
-  
-      const fetchUsers = async (selectedUser) => {
-        const user = selectedUser || (await Parse.User.current());
-        const usrQuery = new Parse.Query(Parse.User);
-        usrQuery.equalTo("userParentId", user.id);
-        usrQuery.limit(10000);
-        usrQuery.select(
-          "objectId",
-          "userParentId",
-          "userParentName",
-          "roleName",
-          "userType",
-          "name",
-          "username",
-          "userReferralCode",
-          "email"
-        );
-  
-        const results = await usrQuery.find({ useMasterKey: true });
-        results.push(user);
-  
-        const ids = results.map((r) => r.id);
-        return { ids, data: results.map((o) => ({ id: o.id, ...o.attributes })) };
-      };
-  
-      let query, count;
-  
-      switch (resource) {
-        case "users":
-          query = new Parse.Query(Parse.User);
-          if (role === "Agent") query.equalTo("userParentId", userid);
-          createFilterQuery(query, filter);
-          count = await query.count({ useMasterKey: true });
-          break;
-  
-        case "redeemRecords":
-        case "rechargeRecords":
-          const type = resource === "redeemRecords" ? "redeem" : "recharge";
-          const Resource = Parse.Object.extend("TransactionRecords");
-          query = new Parse.Query(Resource);
-          filter.type = type;
-  
-          if (role === "Player") filter.userId = userid;
-          else if (role === "Agent") {
-            const { ids } = await fetchUsers();
-            query.containedIn("userId", ids);
-          }
-  
-          createFilterQuery(query, filter);
-          count = await query.count();
-          break;
-  
-        case "summary":
-          if (role === "Super-User" || role === "Agent") {
-            const selectedUser =
-              filter.username &&
-              (await new Parse.Query(Parse.User).get(filter.username, {
-                useMasterKey: true,
-              }));
-            const { ids, data: users } = await fetchUsers(selectedUser);
-  
+      if (resource === "users") {
+        query = new Parse.Query(Parse.User);
+        if (role === "Agent") {
+          query.equalTo("userParentId", userid);
+        }
+        filter &&
+          Object.keys(filter).map((f) => {
+            if (f === "username") query.matches(f, filter[f], "i");
+            else query.equalTo(f, filter[f]);
+          });
+        count = await query.count({ useMasterKey: true });
+      } 
+      else if (resource === "redeemRecords") {
+        const Resource = Parse.Object.extend("TransactionRecords");
+        query = new Parse.Query(Resource);
+        filter = { type: "redeem", ...filter };
+        if (role === "Player") {
+          filter = { userId: userid, ...filter };
+          filter &&
+            Object.keys(filter).map((f) => {
+              if (f === "username") query.matches(f, filter[f], "i");
+              else query.equalTo(f, filter[f]);
+            });
+        } else if (role === "Agent") {
+          filter &&
+            Object.keys(filter).map((f) => {
+              if (f === "username") query.matches(f, filter[f], "i");
+              else query.equalTo(f, filter[f]);
+            });
+          var { ids } = await fetchUsers();
+          query.containedIn("userId", ids);
+        }
+        filter &&
+          Object.keys(filter).map((f) => {
+            if (f === "username") query.matches(f, filter[f], "i");
+            else query.equalTo(f, filter[f]);
+          });
+        count = await query.count();
+      } else if (resource === "rechargeRecords") {
+        const Resource = Parse.Object.extend("TransactionRecords");
+        query = new Parse.Query(Resource);
+        filter = { type: "recharge", ...filter };
+        if (role === "Player") {
+          filter = { userId: userid, ...filter };
+          filter &&
+            Object.keys(filter).map((f) => {
+              if (f === "username") query.matches(f, filter[f], "i");
+              else query.equalTo(f, filter[f]);
+            });
+        } else if (role === "Agent") {
+          filter &&
+            Object.keys(filter).map((f) => {
+              if (f === "username") query.matches(f, filter[f], "i");
+              else query.equalTo(f, filter[f]);
+            });
+          var { ids } = await fetchUsers();
+          query.containedIn("userId", ids);
+        }
+
+        filter &&
+          Object.keys(filter).map((f) => {
+            if (f === "username") query.matches(f, filter[f], "i");
+            else query.equalTo(f, filter[f]);
+          });
+        count = await query.count();
+      } else if (resource === "summary") {
+        var result = null;
+        console.log("Summary");
+        if (role === "Super-User") {
+          //users
+          console.log("SU", filter);
+
+          if (filter?.username) {
+            // console.log("IN IF");
+            var userQuery = new Parse.Query(Parse.User);
+            var selectedUser = await userQuery.get(filter.username, {
+              useMasterKey: true,
+            });
+            var { ids, data } = await fetchUsers(selectedUser);
+
             const transactionQuery = new Parse.Query("TransactionRecords");
             transactionQuery.select(
               "userId",
@@ -173,101 +218,253 @@ export const dataProvider = {
               "type"
             );
             transactionQuery.containedIn("userId", ids);
-            if (filter.startdate) {
+            filter.startdate &&
               transactionQuery.greaterThanOrEqualTo(
                 "transactionDate",
-                new Date(`${filter.startdate} 00:00:00`)
+                new Date(filter.startdate + " 00:00:00")
               );
-            }
-            if (filter.enddate) {
+            filter.enddate &&
               transactionQuery.lessThanOrEqualTo(
                 "transactionDate",
-                new Date(`${filter.enddate} 23:59:59`)
+                new Date(filter.enddate + " 23:59:59")
               );
-            }
-            const transactions = await transactionQuery.find();
-            return {
-              data: [
-                {
-                  id: 0,
-                  users,
-                  transactions: transactions.map((o) => ({
-                    id: o.id,
-                    ...o.attributes,
-                  })),
-                },
-              ],
-              total: null,
-            };
+            transactionQuery.limit(10000);
+            var results = await transactionQuery.find();
+          } else {
+            var userQuery = new Parse.Query(Parse.User);
+            userQuery.limit(10000);
+            var results = await userQuery.find({ useMasterKey: true });
+            var data = results.map((o) => ({ id: o.id, ...o.attributes }));
+            const currentUser = await Parse.User.current();
+            data.push({ id: userid, ...currentUser.attributes });
+
+            //transaction
+            const transactionQuery = new Parse.Query("TransactionRecords");
+            transactionQuery.select(
+              "userId",
+              "status",
+              "transactionAmount",
+              "type"
+            );
+            filter.startdate &&
+              transactionQuery.greaterThanOrEqualTo(
+                "transactionDate",
+                new Date(filter.startdate + " 00:00:00")
+              );
+            filter.enddate &&
+              transactionQuery.lessThanOrEqualTo(
+                "transactionDate",
+                new Date(filter.enddate + " 23:59:59")
+              );
+            transactionQuery.limit(10000);
+            var results = await transactionQuery.find();
           }
-          break;
-  
-        case "summaryData":
-          const rawFilter = {
-            userId: filter.username || userid,
-            startDate: filter.startdate,
-            endDate: filter.enddate,
-          };
-          const summaryResponse = await Parse.Cloud.run("summaryFilter", rawFilter);
-          return {
-            data: Object.entries(summaryResponse?.data).map(([key, value], index) => ({
-              id: index + 1,
-              key,
-              value,
-            })),
+          result = calculateDataSummaries({id: 0, users: data, 
+            transactions: results.map((o) => ({id: o.id, ...o.attributes,}))
+          });
+          /*result = {
+            data: [
+              {
+                id: 0,
+                users: data,
+                transactions: results.map((o) => ({
+                  id: o.id,
+                  ...o.attributes,
+                })),
+              },
+            ],
             total: null,
-          };
-  
-        case "playerDashboard":
-          query = new Parse.Query(Parse.Object.extend("TransactionRecords"));
-          query.equalTo("username", username);
-          createFilterQuery(query, filter);
-          const playerData = await query.find();
-          return {
-            data: playerData.map((o) => ({ id: o.id, ...o.attributes })),
-            total: count,
-          };
-  
-        case "rechargeRecordsExport":
-        case "redeemRecordsExport":
-          query = new Parse.Query(Parse.Object.extend("TransactionRecords"));
-          filter.type = resource === "rechargeRecordsExport" ? "recharge" : "redeem";
-          if (role === "Player") filter.userId = userid;
-          else if (role === "Agent") {
-            const { ids } = await fetchUsers();
-            query.containedIn("userId", ids);
-          }
-          query.limit(30000);
-          if (order === "DESC") query.descending(field);
-          else query.ascending(field);
-          createFilterQuery(query, filter);
-          const exportData = await query.find();
-          return {
-            data: exportData.map((o) => ({ id: o.id, ...o.attributes })),
-            total: count,
-          };
-  
-        default:
-          const DefaultResource = Parse.Object.extend(resource);
-          query = new Parse.Query(DefaultResource);
-          createFilterQuery(query, filter);
-          if (role === "Agent") {
-            const { ids } = await fetchUsers();
-            query.containedIn("userId", ids);
-          }
-          count = await query.count();
+          }; */
+          console.log("SUMMARY", result);
+        }
+        if (role === "Agent") {
+          console.log("Agent");
+          //users
+          const selectedUser =
+            filter && filter.username
+              ? await new Parse.Query(Parse.User).get(filter.username, {
+                  useMasterKey: true,
+                })
+              : null;
+          console.log("selected user:", selectedUser);
+          const { ids, data } = await fetchUsers(selectedUser);
+          // const filteredData = filter?data.filter(obj => obj.id===filter.username):data;
+          // console.log("fetchUsers", data);
+          //transactions
+          const transactionQuery = new Parse.Query("TransactionRecords");
+          transactionQuery.select(
+            "userId",
+            "status",
+            "transactionAmount",
+            "type"
+          );
+          transactionQuery.containedIn("userId", ids);
+          filter.startdate &&
+            transactionQuery.greaterThanOrEqualTo(
+              "transactionDate",
+              new Date(filter.startdate + " 00:00:00")
+            );
+          filter.enddate &&
+            transactionQuery.lessThanOrEqualTo(
+              "transactionDate",
+              new Date(filter.enddate + " 23:59:59")
+            );
+          /*filter && Object.keys(filter).map((f) => {
+              if(f === "username") transactionQuery.equalTo("objectId", filter[f], "i"); 
+              else transactionQuery.equalTo(f, filter[f]);
+          });*/
+          transactionQuery.limit(10000);
+          results = await transactionQuery.find();
+          result = calculateDataSummaries({id: 0, users: data, 
+            transactions: results.map((o) => ({id: o.id, ...o.attributes,}))
+          });
+          /*result = {
+            data: [
+              {
+                id: 0,
+                users: data,
+                transactions: results.map((o) => ({
+                  id: o.id,
+                  ...o.attributes,
+                })),
+              },
+            ],
+            total: null,
+          };*/
+          console.log("Summary ", filter, results, data);
+        }
+        return result;
+      } else if (resource === "summaryData") {
+        var result = null;
+
+        const rawFilter = {
+          userId: filter?.username || userid,
+          endDate: filter?.enddate,
+          startDate: filter?.startdate,
+        };
+
+        console.log("&&&&&", rawFilter);
+
+        const response = await Parse.Cloud.run("summaryFilter", rawFilter);
+
+        console.log(response);
+
+        const array = Object.entries(response?.data).map(
+          ([key, value], index) => ({
+            id: index + 1,
+            key,
+            value,
+          })
+        );
+
+        const res = {
+          data: array,
+          total: count,
+        };
+
+        return res;
+      } else if (resource === "playerDashboard") {
+        const Resource = Parse.Object.extend("TransactionRecords");
+        query = new Parse.Query(Resource);
+        filter = { username: username };
+
+        filter &&
+          Object.keys(filter).map((f) => {
+            if (f === "username") query.matches(f, filter[f], "i");
+            else query.equalTo(f, filter[f]);
+          });
+
+        const response = await query.find();
+        const res = {
+          data: response.map((o) => ({ id: o.id, ...o.attributes })),
+          total: count,
+        };
+        return res;
+      } else if (resource === "rechargeRecordsExport") {
+        const Resource = Parse.Object.extend("TransactionRecords");
+        query = new Parse.Query(Resource);
+        filter = { type: "recharge", ...filter };
+        if (role === "Player") {
+          filter = { userId: userid, ...filter };
+        } else if (role === "Agent") {
+          var { ids } = await fetchUsers();
+          query.containedIn("userId", ids);
+        }
+
+        query.limit(30000);
+        query.descending(field);
+
+        filter &&
+          Object.keys(filter).map((f) => {
+            if (f === "username") query.matches(f, filter[f], "i");
+            else query.equalTo(f, filter[f]);
+          });
+
+        const response = await query.find();
+        const res = {
+          data: response.map((o) => ({ id: o.id, ...o.attributes })),
+          total: count,
+        };
+
+        return res;
+      } else if (resource === "redeemRecordsExport") {
+        const Resource = Parse.Object.extend("TransactionRecords");
+        query = new Parse.Query(Resource);
+        filter = { type: "redeem", ...filter };
+        if (role === "Player") {
+          filter = { userId: userid, ...filter };
+        } else if (role === "Agent") {
+          var { ids } = await fetchUsers();
+          query.containedIn("userId", ids);
+        }
+
+        query.limit(30000);
+        query.descending(field);
+
+        filter &&
+          Object.keys(filter).map((f) => {
+            if (f === "username") query.matches(f, filter[f], "i");
+            else query.equalTo(f, filter[f]);
+          });
+
+        const response = await query.find();
+        const res = {
+          data: response.map((o) => ({ id: o.id, ...o.attributes })),
+          total: count,
+        };
+        return res;
+      } 
+      else {
+        const Resource = Parse.Object.extend(resource);
+        query = new Parse.Query(Resource);
+        filter &&
+          Object.keys(filter).map((f) => query.equalTo(f, filter[f], "i"));
+        var { ids } = await fetchUsers();
+        query.containedIn("userId", ids);
+        count = await query.count();
       }
-  
+
       query.limit(perPage);
       query.skip((page - 1) * perPage);
       if (order === "DESC") query.descending(field);
       else if (order === "ASC") query.ascending(field);
-  
-      const results = await query.find({ useMasterKey: true });
-      return {
+
+      filter &&
+        Object.keys(filter).map((f) => {
+          if (f === "username") query.matches(f, filter[f], "i");
+          else query.equalTo(f, filter[f]);
+        });
+
+      results =
+        resource === "users"
+          ? await query.find({ useMasterKey: true })
+          : await query.find();
+      const res = {
         data: results.map((o) => ({ id: o.id, ...o.attributes })),
+        // data: [],
         total: count,
       };
+      return res;
     } catch (error) {
       throw error;
     }
@@ -401,173 +598,4 @@ export const dataProvider = {
       throw Error("Unable to delete all");
     }
   },
-  getLink: async (resource, params) => {
-    if (resource === "paymentLink") {
-      const { amount, currency } = params;
-  
-      try {
-        // Create a Checkout Session
-        const session = await stripe.checkout.sessions.create({
-          payment_method_types: ["card","cashapp"], // Accept card payments
-          mode: "payment", // One-time payment
-          success_url: "http://localhost:3000/#/StripeForm?session_id={CHECKOUT_SESSION_ID}", // Replace with your success URL
-          cancel_url: "http://localhost:3000/#/StripeForm?session_id={CHECKOUT_SESSION_ID}", // Replace with your cancel URL
-          expires_at: Math.floor(Date.now() / 1000) + 30 * 60, // Expires in 10 minutes
-          line_items: [
-            {
-              price_data: {
-                currency,
-                product_data: {
-                  name: "One-time Payment", // Placeholder for product
-                },
-                unit_amount: amount,
-              },
-              quantity: 1,
-            },
-          ],
-        });
-
-        const TransactionRecords = Parse.Object.extend("TransactionRecords");
-        const transaction = new TransactionRecords();
-
-        transaction.set("transactionIdFromStripe", session.id);
-        transaction.set("transactionAmount", amount);
-        transaction.set("status", 1);
-        transaction.set("createdAt", new Date());
-        transaction.set("referralLink", session.url);
-        transaction.set("referralLink", session.url);
-
-        const savedTransaction = await transaction.save(null);
-
-
-        console.log("Transaction saved:", savedTransaction);
-
-        console.log(session,"sessionStorage")
-        return { data: { url: session.url } };
-      } catch (error) {
-        console.error("Error creating session:", error.message);
-        throw new Error(`Unable to create payment session: ${error.message}`);
-      }
-    }
-  
-    throw new Error("Unsupported resource for getLink");
-  },
-  retrieveCheckoutSession: async (sessionId) => {
-    try {
-      // Fetch the Checkout Session from Stripe
-      const session = await stripe.checkout.sessions.retrieve(sessionId);
-  
-      // Retrieve the corresponding TransactionRecord in Parse
-      const TransactionRecords = Parse.Object.extend("TransactionRecords");
-      const query = new Parse.Query(TransactionRecords);
-      query.equalTo("transactionIdFromStripe", sessionId);
-  
-      const transaction = await query.first();
-  
-      if (!transaction) {
-        throw new Error(`Transaction record not found for session ID: ${sessionId}`);
-      }
-      console.log(session,"sessionsession")
-      console.log(TransactionRecords,"TransactionRecordsTransactionRecords")
-      // Update the transaction status based on the Stripe session status
-      if (session.payment_status === "paid") {
-        transaction.set("status", 2); // Assuming 2 represents 'completed'
-      } else if (session.payment_status === "pending") {
-        transaction.set("status", 1); // Pending
-      } else {
-        transaction.set("status", 0); // Failed or canceled
-      }
-  
-      await transaction.save(null);
-  
-      return {
-        transaction: { id: transaction.id, ...transaction.attributes },
-        stripeSession: session,
-      };
-    } catch (error) {
-      console.error("Error retrieving checkout session:", error.message);
-      throw new Error(`Unable to retrieve session: ${error.message}`);
-    }
-  },
-  userTransaction: async (params) => {
-    const { id, type, username, balance, transactionAmount, remark } = params;
-
-    try {
-      // Find the user by ID
-      const userQuery = new Parse.Query(Parse.User);
-      userQuery.equalTo("objectId",id);
-      const user = await userQuery.first({ useMasterKey: true });
-
-      if (!user) {
-        throw new Error(`User with ID ${id} not found`);
-      }
-
-      let finalAmount;
-      if (type === "redeem") {
-        // Deduct amount from user's balance
-        finalAmount = balance - parseFloat(transactionAmount);
-      } else if (type === "recharge") {
-        // Credit amount to user's balance
-        finalAmount = balance + parseFloat(transactionAmount);
-      }
-
-      // Create a new transaction record
-      const TransactionDetails = Parse.Object.extend("TransactionRecords");
-      const transactionDetails = new TransactionDetails();
-
-      transactionDetails.set("type", type);
-      transactionDetails.set("gameId", "786");
-      transactionDetails.set("username", username);
-      transactionDetails.set("userId", id);
-      transactionDetails.set("transactionDate", new Date());
-      transactionDetails.set("transactionAmount", parseFloat(transactionAmount) / 100 );
-      transactionDetails.set("remark", remark);
-
-      // Save the transaction record
-      await transactionDetails.save(null);
-      const transactionId = transactionDetails.id;
-
-      const session = await stripe.checkout.sessions.create({
-        payment_method_types: ["card"], // Accept card payments,
-        mode: "payment", // One-time payment
-        success_url: `${process.env.REACT_APP_REDIRECT_URL}?session_id={CHECKOUT_SESSION_ID}`, // Dynamic URL from environment variable
-        cancel_url: `${process.env.REACT_APP_REDIRECT_URL}?session_id={CHECKOUT_SESSION_ID}`, // Dynamic URL from environment variable
-        expires_at: Math.floor(Date.now() / 1000) + 30 * 60, // Expires in 10 minutes
-        line_items: [
-          {
-            price_data: {
-              currency:"usd",
-              product_data: {
-                name: "One-time Payment", // Placeholder for product
-              },
-              unit_amount: transactionAmount ,
-            },
-            quantity: 1,
-          },
-        ],
-        metadata: {
-          userId: id, // Replace with the actual user ID
-          username:username
-        },
-      });
-
-      transactionDetails.set("status", 1);
-      transactionDetails.set("referralLink", session.url);
-      transactionDetails.set("transactionIdFromStripe", session.id);
-      await transactionDetails.save(null);
-
-      return {
-        success: true,
-        message: "Transaction updated and validated successfully",
-        apiResponse: session,
-      };
-    } catch (error) {
-      console.error("Error in userTransaction:", error.message);
-
-      return {
-        success: false,
-        message: error.message || "An unexpected error occurred.",
-      };
-    }
-  },
 };
diff --git a/src/Views/RechargeRecords/dialog/RechargeDialog.jsx b/src/Views/RechargeRecords/dialog/RechargeDialog.jsx
index 4e99c05..87a86dc 100644
--- a/src/Views/RechargeRecords/dialog/RechargeDialog.jsx
+++ b/src/Views/RechargeRecords/dialog/RechargeDialog.jsx
@@ -16,7 +16,6 @@ import { useGetIdentity } from "react-admin";
 import { Loader } from "../../Loader";
 
 import { Parse } from "parse";
-import { dataProvider } from "../../../Provider/parseDataProvider";
 // Initialize Parse
 Parse.initialize(process.env.REACT_APP_APPID, process.env.REACT_APP_MASTER_KEY);
 Parse.serverURL = process.env.REACT_APP_URL;
@@ -52,27 +51,14 @@ const RechargeDialog = ({ open, onClose, handleRefresh }) => {
       id: identity.objectId,
       type: "recharge",
       username: identity.username,
-      transactionAmount: rechargeAmount * 100,
+      transactionAmount: rechargeAmount,
       remark,
     };
     setLoading(true);
     try {
-
-      const response = await dataProvider.userTransaction(rawData);
-      if (response?.success) { // Ensure the response indicates success
-        if (identity?.role === "Player") {
-          const paymentUrl = response?.apiResponse?.url;
-          if (paymentUrl) {
-            // Open the URL in a new tab
-            window.open(paymentUrl, "_blank");
-          } else {
-            console.error("Payment URL is missing from the response");
-            // Optionally, notify the user about the missing URL
-          }
-        }
-      } else {
-        console.error("Transaction failed:", response?.message || "Unknown error");
-        // Optionally, show a user-friendly error message
+      const response = await Parse.Cloud.run("userTransaction", rawData);
+      if (identity?.role === "Player") {
+        window.open(response?.apiResponse?.redirect_url, "_blank");
       }
       onClose();
       handleRefresh();
diff --git a/src/Views/SignIn/forms/LoginPage.jsx b/src/Views/SignIn/forms/LoginPage.jsx
index a01c9d6..8631c2e 100644
--- a/src/Views/SignIn/forms/LoginPage.jsx
+++ b/src/Views/SignIn/forms/LoginPage.jsx
@@ -58,6 +58,7 @@ const LoginPage = () => {
       const response = await login({ email: emailPhoneParams, password });
       setLoading(false);
       if (response?.role === "Player") {
+        console.log("LOGIN: ", response);
         redirect("/playerDashboard");
       }
     } catch (error) {
diff --git a/src/Views/Stripe/Stripe.js b/src/Views/Stripe/Stripe.js
deleted file mode 100644
index 9ab64c6..0000000
--- a/src/Views/Stripe/Stripe.js
+++ /dev/null
@@ -1,99 +0,0 @@
-import React, { useState , useEffect } from "react";
-import { dataProvider } from "../../Provider/parseDataProvider";
-import { useSearchParams } from "react-router-dom";
-
-export const Stripe = () => {
-  const [amount, setAmount] = useState("");
-  const [paymentLink, setPaymentLink] = useState("");
-  const [loading, setLoading] = useState(false);
-  const [error, setError] = useState("");
-  const [searchParams] = useSearchParams();
-  const [status, setStatus] = useState("");
-  const [statusVerify, setStatusVerify] = useState(false);
-
-  const handleGenerateLink = async () => {
-    setLoading(true);
-    setError("");
-    setPaymentLink("");
-
-    try {
-      // Call getLink from dataProvider
-      const response = await dataProvider.getLink("paymentLink", {
-        amount: amount * 100, // $10 in cents
-        currency: "usd",
-      }).then((response) => {
-        const url = response.data.url;
-        window.open(url); // Open in a new tab
-      }).catch((error) => {
-        console.error("Error creating payment link:", error.message);
-      });
-      
-    } catch (err) {
-      setError(err.message || "An error occurred while generating the link.");
-    } finally {
-      setLoading(false);
-    }
-  };
-  const checkTransactionStatus = async (sessionId) => {
-    try {
-        setStatusVerify(true)
-      const { transaction, stripeSession } = await dataProvider.retrieveCheckoutSession(sessionId);
-      if (transaction.status === 2) {
-        setStatus("Completed Payment")
-        console.log("Payment Successful!");
-      } else if (transaction.status === 1) {
-        setStatus("Pending Payment")
-        console.log("Payment Pending...");
-      } else {
-        console.log("Payment Failed.");
-      }
-    } catch (error) {
-      console.error("Error checking transaction status:", error.message);
-    } finally{
-        setStatusVerify(false)
-    }
-  };
-  
-  useEffect(() => {
-    const sessionId = searchParams.get("session_id");
-    if (sessionId) {
-      checkTransactionStatus(sessionId);
-    }
-  }, [searchParams]);
-  return (
-    <React.Fragment>
-
-        {statusVerify ? "Verifying Your Payment , Don't clsoe the window" : 
-        
-        <>
-             <div>
-
-        <h1>Stripe Payment Link Generator</h1>
-        <label htmlFor="amount">Enter Amount (USD):</label>
-        <input
-          type="number"
-          id="amount"
-          value={amount}
-          onChange={(e) => setAmount(e.target.value)}
-          placeholder="Enter amount"
-        />
-        <button onClick={handleGenerateLink} disabled={loading}>
-          {loading ? "Generating..." : "Generate Payment Link"}
-        </button>
-      </div>
-
-      {error && <div style={{ color: "red" }}>{error}</div>}
-      {status && <div style={{ color: "green" }}>{status}</div>}
-
-      {paymentLink && (
-        <div>
-          <h2>Payment Link:</h2>
-          <a href={paymentLink} target="_blank" rel="noopener noreferrer">
-            {paymentLink}
-          </a>
-        </div>
-      )}
-      </>}
-    </React.Fragment>
-  );
-};
diff --git a/src/Views/Stripe/Success.js b/src/Views/Stripe/Success.js
deleted file mode 100644
index 549dc77..0000000
--- a/src/Views/Stripe/Success.js
+++ /dev/null
@@ -1,55 +0,0 @@
-import React, { useState, useEffect } from "react";
-import { dataProvider } from "../../Provider/parseDataProvider";
-import { useSearchParams } from "react-router-dom";
-import "../../Assets/css/Success.css"; // Add styles for the loader
-
-export const Success = () => {
-  const [searchParams] = useSearchParams();
-  const [status, setStatus] = useState("");
-  const [loading, setLoading] = useState(false);
-
-  const checkTransactionStatus = async (sessionId) => {
-    setLoading(true);
-    try {
-      const { transaction, stripeSession } = await dataProvider.retrieveCheckoutSession(sessionId);
-
-      if (transaction.status === 2) {
-        setStatus("Completed Payment");
-      } else if (transaction.status === 1) {
-        setStatus("Pending Payment");
-      } else {
-        setStatus("Payment Failed");
-      }
-    } catch (error) {
-      setStatus("Error verifying payment.");
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  useEffect(() => {
-    const sessionId = searchParams.get("session_id");
-    if (sessionId) {
-      checkTransactionStatus(sessionId);
-    }
-  }, [searchParams]);
-
-  return (
-    <div className="success-container">
-      {loading ? (
-        <div className="loader-container">
-          <div className="spinner"></div>
-          <p>Verifying Your Payment, Please Wait...</p>
-        </div>
-      ) : (
-        <div
-          className={`status-message ${
-            status === "Completed Payment" ? "success" : "error"
-          }`}
-        >
-          {status}
-        </div>
-      )}
-    </div>
-  );
-};
diff --git a/src/Views/Summary/DataSummary.jsx b/src/Views/Summary/DataSummary.jsx
index 00e7f09..b097443 100644
--- a/src/Views/Summary/DataSummary.jsx
+++ b/src/Views/Summary/DataSummary.jsx
@@ -1,4 +1,4 @@
-import React, { useRef } from "react";
+import React from "react";
 import {
   useGetIdentity,
   useGetList,
@@ -18,6 +18,7 @@ import {
   minValue,
   maxValue,
 } from "react-admin";
+
 import { Loader, KPILoader } from "../Loader";
 
 // mui
@@ -40,10 +41,10 @@ import ErrorIcon from "@mui/icons-material/Error";
 import WarningIcon from "@mui/icons-material/Warning";
 
 const Summary = () => {
-  const { data , isFetching } = useListContext();
+  const { data, isPending, isFetching } = useListContext();
   const { identity } = useGetIdentity();
 
-  if (isFetching) {
+  if (isPending) {
     return (
       <Box
         display="flex"
@@ -59,7 +60,7 @@ const Summary = () => {
   // if (isPending) {
   //   return <Loader />;
   // }
-
+  /*
   const totalRegisteredUsers = data[0]?.users.filter(
     (item) => item.userReferralCode == null
   ).length; //excluding self
@@ -82,12 +83,13 @@ const Summary = () => {
     data[0]?.transactions
       ?.filter((item) => item.status === 5)
       .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
+  */
 
   const finalData = [
     {
       id: 1,
       name: "Total User",
-      value: totalRegisteredUsers,
+      value: data[0].totalRegisteredUsers,
       bgColor: "#E3F2FD",
       borderColor: "#7EB9FB",
       icon: <PersonIcon color="primary" />,
@@ -95,7 +97,7 @@ const Summary = () => {
     {
       id: 2,
       name: "Total Agent",
-      value: totalAgents,
+      value: data[0].totalAgents,
       bgColor: "#dedede",
       borderColor: "#adb5bd",
       icon: <PersonIcon color="info" />,
@@ -103,7 +105,7 @@ const Summary = () => {
     {
       id: 3,
       name: "Total Recharges",
-      value: "$" + totalRechargeAmount,
+      value: "$" + data[0].totalRechargeAmount,
       bgColor: "#EBF9F0",
       borderColor: "#9CDAB8",
       icon: <PaidIcon color="success" />,
@@ -111,7 +113,7 @@ const Summary = () => {
     {
       id: 4,
       name: "Total Redeems",
-      value: "$" + totalRedeemAmount,
+      value: "$" + data[0].totalRedeemAmount,
       bgColor: "#F4F0F9",
       borderColor: "#C4B0DF",
       icon: <PaidIcon color="secondary" />,
@@ -119,7 +121,7 @@ const Summary = () => {
     {
       id: 5,
       name: "Pending Recharges",
-      value: "$" + totalPendingRechargeAmount,
+      value: "$" + data[0].totalPendingRechargeAmount,
       bgColor: "#FFFCEB",
       borderColor: "#FFE787",
       icon: <WarningIcon color="warning" />,
@@ -127,7 +129,7 @@ const Summary = () => {
     {
       id: 6,
       name: "Failed Redeems",
-      value: "$" + totalFailRedeemAmount,
+      value: "$" + data[0].totalFailRedeemAmount,
       bgColor: "#FFEBEB",
       borderColor: "#FF9C9C",
       icon: <ErrorIcon color="error" />,
@@ -206,18 +208,16 @@ const SearchSelectUsersFilter = () => {
 };
 
 export const DataSummary = () => {
-  const { data, isFetching } = useGetList("users", {
+  const { identity } = useGetIdentity();
+  const { data, isPending } = useGetList("users", {
     pagination: { page: 1, perPage: 10000 },
     sort: { field: "roleName", order: "ASC" },
     filter: { userReferralCode: "" },
-  },{
-    refetchOnWindowFocus: false, // Prevent refetch on focus
-    refetchOnReconnect: false,
   });
-
-  const newData = data?.map((item) => ({
+  console.log("USERS", data)
+  const newData = data?.map((item) => (item.id!== identity.objectId && {
     ...item,
-    optionName: "".concat(item.roleName, " - ", item.name),
+    optionName: "".concat(item.name, " (", item.roleName, ")"),
   }));
 
   const currentDate = new Date().toLocaleDateString("es-CL");
@@ -227,6 +227,7 @@ export const DataSummary = () => {
   const nextYearDate = new Date(
     new Date().setFullYear(new Date().getFullYear() + 1)
   ).toLocaleDateString("es-CL");
+
   const dataFilters = [
     <AutocompleteInput
       label="User"
@@ -243,14 +244,14 @@ export const DataSummary = () => {
       source="startdate"
       alwaysOn
       resettable
-      validate={maxValue(currentDate)}
+      // validate={maxValue(currentDate)}
     />,
     <DateInput
       label="End date"
       source="enddate"
       alwaysOn
       resettable
-      validate={maxValue(currentDate)}
+      // validate={maxValue(currentDate)}
     />,
 
     // <SearchSelectUsersFilter />,
@@ -267,14 +268,7 @@ export const DataSummary = () => {
             alignItems: "flex-start",
           }}
         />
-        {isFetching ? <Box
-        display="flex"
-        justifyContent="center"
-        alignItems="center"
-        minHeight="50vh"
-      >
-        <Loading />
-      </Box> :  <Summary />}
+        <Summary />
       </ListBase>
     </React.Fragment>
   );
diff --git a/src/Views/Summary/Summary.jsx b/src/Views/Summary/Summary.jsx
index d20e14a..4a00fa9 100644
--- a/src/Views/Summary/Summary.jsx
+++ b/src/Views/Summary/Summary.jsx
@@ -48,7 +48,7 @@ const Test = () => {
   }
 
   if (isFetching) {
-    return <Loading />;
+    return <Loader />;
   }
 
   // Convert the array into an object
@@ -147,7 +147,7 @@ export const Summary = () => {
     userId: "",
   });
 
-  const { data , isFetching } = useGetList("users", {
+  const { data } = useGetList("users", {
     pagination: { page: 1, perPage: 10000 },
     sort: { field: "roleName", order: "DEC" },
     filter: { userReferralCode: "" },
@@ -214,14 +214,7 @@ export const Summary = () => {
             alignItems: "flex-start",
           }}
         />
-          {isFetching ? <Box
-        display="flex"
-        justifyContent="center"
-        alignItems="center"
-        minHeight="50vh"
-      >
-        <Loading />
-      </Box> :  <Test />}
+        <Test />
       </ListBase>
     </React.Fragment>
   );
diff --git a/src/Views/Summary/SummaryList .jsx b/src/Views/Summary/SummaryList .jsx
deleted file mode 100644
index 5677b6a..0000000
--- a/src/Views/Summary/SummaryList .jsx	
+++ /dev/null
@@ -1,192 +0,0 @@
-import React, { useEffect, useState } from "react";
-import { useDataProvider, useGetIdentity, Loading } from "react-admin";
-// mui
-import { Typography, Card, CardContent, Grid, Box } from "@mui/material";
-// mui icons
-import PersonIcon from "@mui/icons-material/Person";
-import PaidIcon from "@mui/icons-material/Paid";
-import ErrorIcon from "@mui/icons-material/Error";
-import WarningIcon from "@mui/icons-material/Warning";
-// loader
-import { Loader } from "../Loader";
-
-export const SummaryList = () => {
-  const { identity } = useGetIdentity();
-  const dataProvider = useDataProvider();
-
-  const [data, setData] = useState({
-    rechargeRecords: [],
-    redeemRecords: [],
-    userRecords: [],
-  });
-  const [loading, setLoading] = useState(true);
-
-  useEffect(() => {
-    const fetchAllData = async () => {
-      setLoading(true);
-      try {
-        const [usersResponse, rechargeResponse, redeemResponse] =
-          await Promise.all([
-            dataProvider.getList("users", {
-              pagination: { page: 1, perPage: 10000 },
-              sort: { field: "id", order: "ASC" },
-              filter: {},
-            }),
-            dataProvider.getList("rechargeRecords", {
-              pagination: { page: 1, perPage: 10000 },
-              sort: { field: "id", order: "ASC" },
-              filter: {},
-            }),
-            dataProvider.getList("redeemRecords", {
-              pagination: { page: 1, perPage: 10000 },
-              sort: { field: "id", order: "ASC" },
-              filter: {},
-            }),
-          ]);
-        setLoading(false);
-        setData({
-          userRecords: usersResponse.data,
-          rechargeRecords: rechargeResponse.data,
-          redeemRecords: redeemResponse.data,
-        });
-      } catch (error) {
-        console.error("Error fetching data:", error);
-      } finally {
-        setLoading(false);
-      }
-    };
-
-    fetchAllData();
-  }, [dataProvider]);
-
-  const totalAgents =
-    data.userRecords?.filter((user) => user.roleName === "Agent").length || 0;
-
-  const totalRechargeAmount =
-    data.rechargeRecords
-      ?.filter((item) => item.status === 2 || item.status === 3)
-      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
-
-  const totalRedeemAmount =
-    data.redeemRecords
-      ?.filter((item) => item.status === 4)
-      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
-
-  const totalPendingRecharge =
-    data.rechargeRecords
-      ?.filter((item) => item.status === 1)
-      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
-
-  const totalFailRedeem =
-    data.redeemRecords
-      ?.filter((item) => item.status === 5)
-      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
-
-  const finalData = [
-    {
-      id: 1,
-      name: "Total User",
-      value: data.userRecords?.length,
-      bgColor: "#E3F2FD",
-      borderColor: "#7EB9FB",
-      icon: <PersonIcon color="primary" />,
-    },
-    {
-      id: 2,
-      name: "Total Agent",
-      value: totalAgents,
-      bgColor: "#dedede",
-      borderColor: "#adb5bd",
-      icon: <PersonIcon color="info" />,
-    },
-    {
-      id: 3,
-      name: "Total Recharges",
-      value: "$" + totalRechargeAmount,
-      bgColor: "#EBF9F0",
-      borderColor: "#9CDAB8",
-      icon: <PaidIcon color="success" />,
-    },
-    {
-      id: 4,
-      name: "Total Redeems",
-      value: "$" + totalRedeemAmount,
-      bgColor: "#F4F0F9",
-      borderColor: "#C4B0DF",
-      icon: <PaidIcon color="secondary" />,
-    },
-    {
-      id: 5,
-      name: "Pending Recharges",
-      value: "$" + totalPendingRecharge,
-      bgColor: "#FFFCEB",
-      borderColor: "#FFE787",
-      icon: <WarningIcon color="warning" />,
-    },
-    {
-      id: 6,
-      name: "Failed Redeems",
-      value: "$" + totalFailRedeem,
-      bgColor: "#FFEBEB",
-      borderColor: "#FF9C9C",
-      icon: <ErrorIcon color="error" />,
-    },
-  ];
-
-  // if (loading) {
-  //   // React-admin Loading component
-  //   return (
-  //     <Box
-  //       display="flex"
-  //       justifyContent="center"
-  //       alignItems="center"
-  //       minHeight="50vh"
-  //     >
-  //       <Loading />
-  //     </Box>
-  //   );
-  // }
-
-  if (loading) {
-    return <Loader />;
-  }
-
-  return (
-    <Grid container spacing={2} mt>
-      {finalData
-        .filter((item) => {
-          if (item.name === "Total Agent" && identity?.role !== "Super-User") {
-            return false;
-          }
-          return true;
-        })
-        .map((item) => (
-          <Grid item xs={12} md={4} key={item?.id}>
-            <Card
-              sx={{
-                backgroundColor: item?.bgColor,
-                border: 2,
-                borderColor: item?.borderColor,
-                borderRadius: 0,
-                boxShadow: 0,
-              }}
-            >
-              <CardContent>
-                <Typography
-                  variant="subtitle1"
-                  display="flex"
-                  alignItems="center"
-                >
-                  {item?.icon}
-                  &nbsp;{item?.name}
-                </Typography>
-                <Typography variant="h4" sx={{ mt: 1, fontWeight: "bold" }}>
-                  {item?.value}
-                </Typography>
-              </CardContent>
-            </Card>
-          </Grid>
-        ))}
-    </Grid>
-  );
-};
diff --git a/src/Views/Summary/SummaryList copy.jsx b/src/Views/Summary/SummaryList copy.jsx
deleted file mode 100644
index 11ae255..0000000
--- a/src/Views/Summary/SummaryList copy.jsx	
+++ /dev/null
@@ -1,314 +0,0 @@
-import React, { useEffect, useState } from "react";
-import { useDataProvider, useGetIdentity, Loading } from "react-admin";
-// mui
-import {
-  Typography,
-  Card,
-  CardContent,
-  Grid,
-  Box,
-  TextField,
-} from "@mui/material";
-// mui icons
-import PersonIcon from "@mui/icons-material/Person";
-import PaidIcon from "@mui/icons-material/Paid";
-import ErrorIcon from "@mui/icons-material/Error";
-import WarningIcon from "@mui/icons-material/Warning";
-// date picker
-// import DatePicker from "react-datepicker";
-// import "react-datepicker/dist/react-datepicker.css";
-
-export const SummaryList = () => {
-  const { identity } = useGetIdentity();
-  const dataProvider = useDataProvider();
-  console.log("=====", identity);
-
-  const [data, setData] = useState({
-    rechargeRecords: [],
-    redeemRecords: [],
-    userRecords: [],
-  });
-
-  const [loading, setLoading] = useState(true);
-  const [startDate, setStartDate] = useState(new Date());
-  const [endDate, setEndDate] = useState(new Date());
-  const [selectedUsername, setSelectedUsername] = useState(null);
-
-  // Fetch all data
-  useEffect(() => {
-    const fetchAllData = async () => {
-      setLoading(true);
-      try {
-        const [usersResponse, rechargeResponse, redeemResponse] =
-          await Promise.all([
-            dataProvider.getList("users", {
-              pagination: { page: 1, perPage: 100 },
-              sort: { field: "id", order: "ASC" },
-              filter: {},
-            }),
-            dataProvider.getList("rechargeRecords", {
-              pagination: { page: 1, perPage: 100 },
-              sort: { field: "id", order: "ASC" },
-              filter: {},
-            }),
-            dataProvider.getList("redeemRecords", {
-              pagination: { page: 1, perPage: 100 },
-              sort: { field: "id", order: "ASC" },
-              filter: {},
-            }),
-          ]);
-
-        setData({
-          userRecords: usersResponse.data,
-          rechargeRecords: rechargeResponse.data,
-          redeemRecords: redeemResponse.data,
-        });
-      } catch (error) {
-        console.error("Error fetching data:", error);
-      } finally {
-        setLoading(false);
-      }
-    };
-
-    fetchAllData();
-  }, [dataProvider]);
-
-  // Function to filter records based on date range
-  const filterByDate = (records, startDate, endDate) => {
-    return records.filter((record) => {
-      const recordDate = new Date(record.createdAt); // assuming 'createdAt' is the field containing the record date
-      return recordDate >= startDate && recordDate <= endDate;
-    });
-  };
-
-  // Filter the users based on the selected username
-  const selectedUser = data.userRecords.find(
-    (user) => user.username === selectedUsername
-  );
-
-  const userChildren = selectedUser
-    ? data.userRecords.filter((item) => item.userParentId === selectedUser.id)
-    : [];
-
-  // Filter users based on role
-  const filteredUsers = !selectedUser
-    ? data.userRecords // If no user is selected, show all users
-    : selectedUser.roleName === "Super-User"
-    ? data.userRecords // Show all users if Superuser
-    : selectedUser.roleName === "Agent"
-    ? userChildren // Show only child users if Agent
-    : selectedUser.roleName === "Player"
-    ? [selectedUser] // Show only the selected player if Player
-    : []; // If no matching role, show nothing
-
-  // Filter recharge records based on selected user role
-  const filteredRecharge =
-    selectedUser?.roleName === "Super-User"
-      ? data.rechargeRecords // Show all recharge records if Super-User
-      : selectedUser?.roleName === "Agent"
-      ? data.rechargeRecords.filter(
-          (record) => record.userId === selectedUser.id
-        ) // Show agent's recharge records if Agent
-      : selectedUser?.roleName === "Player"
-      ? data.rechargeRecords.filter(
-          (record) => record.userId === selectedUser.id
-        ) // Show player's recharge records if Player
-      : []; // No recharge records for undefined roles
-
-  // Calculate the count based on the selected user's role
-  const userCount = selectedUser
-    ? selectedUser.roleName === "Super-User"
-      ? data.userRecords?.filter((user) => user.roleName === "Agent").length
-      : selectedUser.roleName === "Agent"
-      ? 1 // Show children count for Agent
-      : selectedUser.roleName === "Player"
-      ? 1 // Show count of 1 for Player
-      : 0 // Default case (no matching role)
-    : data.userRecords?.filter((user) => user.roleName === "Agent").length;
-
-  useEffect(() => {
-    if (selectedUser) {
-      // console.log("*** role ***", selectedUser.roleName);
-      // console.log("$$$ child user $$$", filteredUsers);
-      console.log("@@@ child recharge @@@", filteredRecharge);
-    }
-  }, [selectedUser]);
-
-  console.log("&&&&&", data);
-
-  const totalAgents =
-    data.userRecords?.filter((user) => user.roleName === "Agent").length || 0;
-
-  const filteredRechargeRecords = filterByDate(
-    data.rechargeRecords,
-    startDate,
-    endDate
-  );
-  const filteredRedeemRecords = filterByDate(
-    data.redeemRecords,
-    startDate,
-    endDate
-  );
-
-  const totalRechargeAmount =
-    filteredRechargeRecords
-      ?.filter((item) => item.status === 2 || item.status === 3)
-      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
-
-  const totalRedeemAmount =
-    filteredRedeemRecords
-      ?.filter((item) => item.status === 4)
-      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
-
-  const totalPendingRecharge =
-    filteredRechargeRecords
-      ?.filter((item) => item.status === 1)
-      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
-
-  const totalFailRedeem =
-    filteredRedeemRecords
-      ?.filter((item) => item.status === 5)
-      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
-
-  const finalData = [
-    {
-      id: 1,
-      name: "Total User",
-      value: filteredUsers?.length,
-      bgColor: "#E3F2FD",
-      borderColor: "#7EB9FB",
-      icon: <PersonIcon color="primary" />,
-    },
-    {
-      id: 2,
-      name: "Total Agent",
-      value: userCount,
-      bgColor: "#dedede",
-      borderColor: "#adb5bd",
-      icon: <PersonIcon color="info" />,
-    },
-    {
-      id: 3,
-      name: "Total Recharges",
-      value: "$" + totalRechargeAmount,
-      bgColor: "#EBF9F0",
-      borderColor: "#9CDAB8",
-      icon: <PaidIcon color="success" />,
-    },
-    {
-      id: 4,
-      name: "Total Redeems",
-      value: "$" + totalRedeemAmount,
-      bgColor: "#F4F0F9",
-      borderColor: "#C4B0DF",
-      icon: <PaidIcon color="secondary" />,
-    },
-    {
-      id: 5,
-      name: "Pending Recharges",
-      value: "$" + totalPendingRecharge,
-      bgColor: "#FFFCEB",
-      borderColor: "#FFE787",
-      icon: <WarningIcon color="warning" />,
-    },
-    {
-      id: 6,
-      name: "Failed Redeems",
-      value: "$" + totalFailRedeem,
-      bgColor: "#FFEBEB",
-      borderColor: "#FF9C9C",
-      icon: <ErrorIcon color="error" />,
-    },
-  ];
-
-  if (loading) {
-    return (
-      <Box
-        display="flex"
-        justifyContent="center"
-        alignItems="center"
-        minHeight="50vh"
-      >
-        <Loading />
-      </Box>
-    );
-  }
-
-  return (
-    <React.Fragment>
-      <div>
-        {/* <label>Start Date: </label>
-        <DatePicker
-          selected={startDate}
-          onChange={(date) => {
-            setStartDate(date);
-            console.log("Start Date changed:", date);
-          }}
-          dateFormat="yyyy/MM/dd"
-        />
-        <br />
-        <label>End Date: </label>
-        <DatePicker
-          selected={endDate}
-          onChange={(date) => {
-            setEndDate(date);
-            console.log("End Date changed:", date);
-          }}
-          dateFormat="yyyy/MM/dd"
-        /> */}
-        <br />
-        <label>Username: </label>
-        <select
-          onChange={(e) => setSelectedUsername(e.target.value)}
-          value={selectedUsername || ""}
-        >
-          <option value="">Select User</option>
-          {data.userRecords.map((user) => (
-            <option key={user.id} value={user.username}>
-              {user.username} - {user.roleName}
-            </option>
-          ))}
-        </select>
-      </div>
-      <Grid container spacing={2} mt>
-        {finalData
-          .filter((item) => {
-            if (
-              item.name === "Total Agent" &&
-              identity?.role !== "Super-User"
-            ) {
-              return false;
-            }
-            return true;
-          })
-          .map((item) => (
-            <Grid item xs={12} md={4} key={item?.id}>
-              <Card
-                sx={{
-                  backgroundColor: item?.bgColor,
-                  border: 2,
-                  borderColor: item?.borderColor,
-                  borderRadius: 0,
-                  boxShadow: 0,
-                }}
-              >
-                <CardContent>
-                  <Typography
-                    variant="subtitle1"
-                    display="flex"
-                    alignItems="center"
-                  >
-                    {item?.icon}
-                    &nbsp;{item?.name}
-                  </Typography>
-                  <Typography variant="h4" sx={{ mt: 1, fontWeight: "bold" }}>
-                    {item?.value}
-                  </Typography>
-                </CardContent>
-              </Card>
-            </Grid>
-          ))}
-      </Grid>
-    </React.Fragment>
-  );
-};
diff --git a/src/Views/Summary/SummaryList old.jsx b/src/Views/Summary/SummaryList old.jsx
deleted file mode 100644
index 6721bda..0000000
--- a/src/Views/Summary/SummaryList old.jsx	
+++ /dev/null
@@ -1,354 +0,0 @@
-import React, { useEffect, useState } from "react";
-import {
-  useDataProvider,
-  useGetIdentity,
-  Loading,
-  SearchInput,
-  List,
-  TextInput,
-  SimpleForm,
-  TextField,
-  SimpleShowLayout,
-  useListContext,
-  ListContextProvider,
-  useListController,
-  ListBase,
-  FilterForm,
-} from "react-admin";
-// mui
-import {
-  Typography,
-  Card,
-  CardContent,
-  Grid,
-  Box,
-  FormControl,
-  InputLabel,
-  Select,
-  MenuItem,
-  Button,
-} from "@mui/material";
-// mui icons
-import PersonIcon from "@mui/icons-material/Person";
-import PaidIcon from "@mui/icons-material/Paid";
-import ErrorIcon from "@mui/icons-material/Error";
-import WarningIcon from "@mui/icons-material/Warning";
-
-import { Parse } from "parse";
-// Initialize Parse
-Parse.initialize(process.env.REACT_APP_APPID, process.env.REACT_APP_MASTER_KEY);
-Parse.serverURL = process.env.REACT_APP_URL;
-
-export const Aside = () => {
-  const { data, isPending, filterValues, setFilters, resource, perPage } =
-    useListContext();
-
-  setFilters({ username: "dhyan" });
-  console.log("=====", filterValues);
-  console.log("=====", resource);
-
-  const totalUsers =
-    data?.filter(
-      (ele) =>
-        ele.roleName === "Super-User" ||
-        ele.roleName === "Agent" ||
-        ele.roleName === "Player"
-    ).length || 1;
-
-  const totalAgents =
-    data?.filter((ele) => ele.roleName === "Agent").length || 1;
-
-  const totalRechargeAmount =
-    data
-      ?.filter((item) => item.status === 2 || item.status === 3)
-      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
-
-  const totalRedeemAmount =
-    data
-      ?.filter((item) => item.status === 4)
-      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
-
-  const totalPendingRecharge =
-    data
-      ?.filter((item) => item.status === 1)
-      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
-
-  const totalFailRedeem =
-    data
-      ?.filter((item) => item.status === 5)
-      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
-
-  if (isPending) return null;
-  return (
-    <div>
-      <div>Total Users:{totalUsers}</div>
-      <div>Total Agent:{totalAgents}</div>
-      <div>Total Recharges:{totalRechargeAmount}</div>
-      <div>Total Redeems:{totalRedeemAmount}</div>
-      <div>Pending Recharges:{totalPendingRecharge}</div>
-      <div>Failed Redeems:{totalFailRedeem}</div>
-    </div>
-  );
-};
-
-export const SummaryList = () => {
-  const { identity } = useGetIdentity();
-  const dataProvider = useDataProvider();
-
-  const [sumaryData, setSumaryData] = useState({});
-  const [query, setQuery] = useState("");
-  const [loading, setLoading] = useState(true);
-  const [selectedUser, setSelectedUser] = useState("");
-
-  const [data, setData] = useState({
-    rechargeRecords: [],
-    redeemRecords: [],
-    userRecords: [],
-  });
-
-  const summaryData = async () => {
-    try {
-      const response = await Parse.Cloud.run("summaryFilter", {
-        role: identity?.role,
-        id: identity?.objectId,
-      });
-      setSumaryData(response);
-    } catch (error) {
-      console.error("Error fetching summary", error.message);
-    }
-  };
-
-  const readableUsersData = sumaryData?.data?.users.map((user) =>
-    user.toJSON()
-  );
-  const readableTransactionData =
-    sumaryData?.data?.transactions &&
-    sumaryData?.data?.transactions.map((user) => user.toJSON());
-
-  useEffect(() => {
-    summaryData();
-  }, [identity]);
-
-  useEffect(() => {
-    const fetchAllData = async () => {
-      setLoading(true);
-      try {
-        const [usersResponse, rechargeResponse, redeemResponse] =
-          await Promise.all([
-            dataProvider.getList("users", {
-              pagination: { page: 1, perPage: 100 },
-              sort: { field: "id", order: "ASC" },
-              filter: {},
-            }),
-            dataProvider.getList("rechargeRecords", {
-              pagination: { page: 1, perPage: 100 },
-              sort: { field: "id", order: "ASC" },
-              filter: {},
-            }),
-            dataProvider.getList("redeemRecords", {
-              pagination: { page: 1, perPage: 100 },
-              sort: { field: "id", order: "ASC" },
-              filter: {},
-            }),
-          ]);
-
-        setData({
-          userRecords: usersResponse.data,
-          rechargeRecords: rechargeResponse.data,
-          redeemRecords: redeemResponse.data,
-        });
-      } catch (error) {
-        console.error("Error fetching data:", error);
-      } finally {
-        setLoading(false);
-      }
-    };
-
-    fetchAllData();
-  }, [dataProvider]);
-
-  const totalAgents =
-    readableUsersData?.filter((ele) => ele.roleName === "Agent").length || 1;
-
-  const totalRechargeAmount =
-    readableTransactionData
-      ?.filter((item) => item.status === 2 || item.status === 3)
-      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
-
-  const totalRedeemAmount =
-    readableTransactionData
-      ?.filter((item) => item.status === 4)
-      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
-
-  const totalPendingRecharge =
-    readableTransactionData
-      ?.filter((item) => item.status === 1)
-      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
-
-  const totalFailRedeem =
-    readableTransactionData
-      ?.filter((item) => item.status === 5)
-      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
-
-  const finalData = [
-    {
-      id: 1,
-      name: "Total User",
-      value: readableUsersData?.length,
-      bgColor: "#E3F2FD",
-      borderColor: "#7EB9FB",
-      icon: <PersonIcon color="primary" />,
-    },
-    {
-      id: 2,
-      name: "Total Agent",
-      value: totalAgents,
-      bgColor: "#dedede",
-      borderColor: "#adb5bd",
-      icon: <PersonIcon color="info" />,
-    },
-    {
-      id: 3,
-      name: "Total Recharges",
-      value: "$" + totalRechargeAmount,
-      bgColor: "#EBF9F0",
-      borderColor: "#9CDAB8",
-      icon: <PaidIcon color="success" />,
-    },
-    {
-      id: 4,
-      name: "Total Redeems",
-      value: "$" + totalRedeemAmount,
-      bgColor: "#F4F0F9",
-      borderColor: "#C4B0DF",
-      icon: <PaidIcon color="secondary" />,
-    },
-    {
-      id: 5,
-      name: "Pending Recharges",
-      value: "$" + totalPendingRecharge,
-      bgColor: "#FFFCEB",
-      borderColor: "#FFE787",
-      icon: <WarningIcon color="warning" />,
-    },
-    {
-      id: 6,
-      name: "Failed Redeems",
-      value: "$" + totalFailRedeem,
-      bgColor: "#FFEBEB",
-      borderColor: "#FF9C9C",
-      icon: <ErrorIcon color="error" />,
-    },
-  ];
-
-  const handleSubmit = async () => {
-    // Find the selected user from the data
-    const selectedUserObj = data.userRecords?.find(
-      (user) => user.username === selectedUser
-    );
-    console.log("Selected User Data: ", selectedUserObj);
-    try {
-      const response = await Parse.Cloud.run("summaryFilter", {
-        role: selectedUserObj?.roleName,
-        id: selectedUserObj?.id,
-      });
-      setSumaryData(response);
-      // console.log("*****", response);
-    } catch (error) {
-      console.error("Error fetching summary", error.message);
-    }
-  };
-
-  useEffect(() => {
-    summaryData();
-  }, [identity]);
-
-  if (loading) {
-    // React-admin Loading component
-    return (
-      <Box
-        display="flex"
-        justifyContent="center"
-        alignItems="center"
-        minHeight="50vh"
-      >
-        <Loading />
-      </Box>
-    );
-  }
-
-  const dataFilters = [<SearchInput source="username" alwaysOn resettable />];
-
-  const ListToolbar = () => <FilterForm filters={dataFilters} />;
-
-  return (
-    <React.Fragment>
-      <ListBase>
-        {/* <ListToolbar /> */}
-        <Aside />
-        {/* <Box sx={{ mt: 2 }}>
-        <FormControl sx={{ minWidth: 410 }}>
-          <InputLabel id="demo-simple-select-label">User Name</InputLabel>
-          <Select
-            labelId="demo-simple-select-label"
-            id="demo-simple-select"
-            label="User Name"
-            value={selectedUser}
-            onChange={(e) => setSelectedUser(e.target.value)}
-          >
-            {data.userRecords?.map((user) => (
-              <MenuItem key={user?.id} value={user.username}>
-                {user.username} - {user.roleName}
-              </MenuItem>
-            ))}
-          </Select>
-        </FormControl>
-      </Box>
-      <Box mt={2}>
-        <Button variant="contained" color="primary" onClick={handleSubmit}>
-          Submit
-        </Button>
-      </Box> */}
-        <Grid container spacing={2} mt>
-          {finalData
-            .filter((item) => {
-              if (
-                item.name === "Total Agent" &&
-                identity?.role !== "Super-User"
-              ) {
-                return false;
-              }
-              return true;
-            })
-            .map((item) => (
-              <Grid item xs={12} md={4} key={item?.id}>
-                <Card
-                  sx={{
-                    backgroundColor: item?.bgColor,
-                    border: 2,
-                    borderColor: item?.borderColor,
-                    borderRadius: 0,
-                    boxShadow: 0,
-                  }}
-                >
-                  <CardContent>
-                    <Typography
-                      variant="subtitle1"
-                      display="flex"
-                      alignItems="center"
-                    >
-                      {item?.icon}
-                      &nbsp;{item?.name}
-                    </Typography>
-                    <Typography variant="h4" sx={{ mt: 1, fontWeight: "bold" }}>
-                      {item?.value}
-                    </Typography>
-                  </CardContent>
-                </Card>
-              </Grid>
-            ))}
-        </Grid>
-      </ListBase>
-    </React.Fragment>
-  );
-};
diff --git a/src/Views/User/dialog/RechargeDialog.jsx b/src/Views/User/dialog/RechargeDialog.jsx
index dd27446..b84539a 100644
--- a/src/Views/User/dialog/RechargeDialog.jsx
+++ b/src/Views/User/dialog/RechargeDialog.jsx
@@ -14,7 +14,6 @@ import {
 // loader
 import { Loader } from "../../Loader";
 import { Parse } from "parse";
-import { dataProvider } from "../../../Provider/parseDataProvider";
 // Initialize Parse
 Parse.initialize(process.env.REACT_APP_APPID, process.env.REACT_APP_MASTER_KEY);
 Parse.serverURL = process.env.REACT_APP_URL;
@@ -43,13 +42,13 @@ const RechargeDialog = ({ open, onClose, record, fetchAllUsers }) => {
     event.preventDefault();
     const rawData = {
       ...record,
-      transactionAmount: rechargeAmount * 100,
+      transactionAmount: rechargeAmount,
       remark,
       type: "recharge",
     };
     setLoading(true);
     try {
-      await dataProvider.userTransaction(rawData);
+      await Parse.Cloud.run("userTransaction", rawData);
       onClose();
       fetchAllUsers();
       setLoading(false);
diff --git a/src/utils.js b/src/utils.js
index 795a7dc..dc2b507 100644
--- a/src/utils.js
+++ b/src/utils.js
@@ -19,4 +19,41 @@ export const mapTransactionStatus = (status) => {
     default:
       return "Unknown Status";
   }
+};
+
+export const calculateDataSummaries = ({ identity, id, users, transactions}) => {
+  const totalRegisteredUsers = users.filter(
+    (item) => !item.userReferralCode
+  ).length; //excluding self
+  const totalAgents = users.filter(
+    (item) => item.roleName === "Agent" //&& item.username !== identity.username
+  ).length;
+  const totalRechargeAmount =
+    transactions.filter((item) => item.status === 2 || item.status === 3)
+      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
+  const totalRedeemAmount =
+    transactions.filter((item) => item.status === 4)
+      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
+  const totalPendingRechargeAmount =
+    transactions.filter((item) => item.status === 1)
+      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
+  const totalFailRedeemAmount =
+    transactions.filter((item) => item.status === 5)
+      .reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
+  const totalRecords = transactions.length;
+  const totalAmt = transactions.reduce((sum, item) => sum + item.transactionAmount, 0) || 0;
+  return { 
+    data: [{
+      id: id,
+      totalRegisteredUsers: totalRegisteredUsers,
+      totalAgents: totalAgents,
+      totalRechargeAmount: totalRechargeAmount,
+      totalRedeemAmount: totalRedeemAmount,
+      totalPendingRechargeAmount: totalPendingRechargeAmount,
+      totalFailRedeemAmount: totalFailRedeemAmount,
+      totalRecords: totalRecords,
+      totalAmt: totalAmt
+    }],
+    total: null,
+  };
 };
\ No newline at end of file
